{"version":3,"sources":["components/Navbar.js","components/Films/Film.js","components/Loader.js","components/Films/Films.js","components/Planets/Planet.js","components/Planets/Planets.js","components/People/Person.js","components/People/People.js","components/Starships/Starship.js","components/Starships/Starships.js","components/Home.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Film","film","className","title","director","release_date","Loader","Spinner","animation","role","style","width","height","margin","display","color","fetchFilms","a","fetch","res","json","Films","useQuery","onSuccess","console","log","onError","data","status","results","map","Planet","planet","name","population","terrain","fetchPlanets","page","Planets","useState","keepPreviousData","isPreviousData","old","Math","min","disabled","next","Person","person","skin_color","birth_year","fetchPeople","People","Starship","starship","manufacturer","model","fetchStarships","Starships","Home","queryClient","QueryClient","setDefaultOptions","queries","App","QueryClientProvider","client","initialIsOpen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbd89ad0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = ({ setPage }) => {\r\n  return (\r\n    <>\r\n      <nav>\r\n        <button onClick={() => setPage(\"planets\")}>Planets</button>\r\n        <button onClick={() => setPage(\"films\")}>Films</button>\r\n        <button onClick={() => setPage(\"people\")}>People</button>\r\n        <button onClick={() => setPage(\"starships\")}>Starships</button>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Film = ({ film }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{film.title}</h3>\r\n      <p>Director - {film.director}</p>\r\n      <p>Release Date - {film.release_date}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Film;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <Spinner\r\n      animation=\"border\"\r\n      role=\"status\"\r\n      style={{\r\n        width: \"60px\",\r\n        height: \"60px\",\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n        color: \"orange\",\r\n      }}\r\n    >\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </Spinner>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport Film from \"./Film\";\r\n\r\nimport Loader from \"../Loader\";\r\n\r\n////////////  async function of fetching data of films from api  //////////\r\n\r\nconst fetchFilms = async () => {\r\n  const res = await fetch(`https://swapi.dev/api/films/`);\r\n  return res.json();\r\n};\r\n\r\nconst Films = () => {\r\n  //////////////   useQuery to get data of films asynchronously by providing config (like: staleTime and cacheTime)  ////////////\r\n\r\n  const { data, status } = useQuery(\"films\", fetchFilms, {\r\n    onSuccess: () => console.log(\"Films Data feched successfully\"),\r\n    onError: () => console.log(\"Error while fetching data of films\"),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h2>Films</h2>\r\n\r\n      {status === \"loading\" ? (\r\n        <Loader />\r\n      ) : status === \"error\" ? (\r\n        <div> Error fetching data</div>\r\n      ) : status === \"success\" ? (\r\n        data.results.map((film) => <Film key={film.title} film={film} />)\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Films;\r\n","import React from \"react\";\r\n\r\nconst Planet = ({ planet }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{planet.name}</h3>\r\n      <p>Population - {planet.population}</p>\r\n      <p>Terrain - {planet.terrain}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport Planet from \"./Planet\";\r\n\r\nimport Loader from \"../Loader\";\r\n\r\n////////////  async function of fetching data of planets from api  //////////\r\n\r\nconst fetchPlanets = async (page) => {\r\n  const res = await fetch(`https://swapi.dev/api/planets/?page=${page}`);\r\n  return res.json();\r\n};\r\n\r\nconst Planets = () => {\r\n  const [page, setPage] = useState(1);\r\n\r\n  //////////////   useQuery to get data of planets asynchronously by providing config (like: staleTime and cacheTime)  ////////////\r\n\r\n  const { data, status, isPreviousData } = useQuery(\r\n    [\"planets\", page],\r\n    () => fetchPlanets(page),\r\n    { keepPreviousData: true },\r\n    {\r\n      onSuccess: () => console.log(\"Planets Data feched successfully\"),\r\n      onError: () => console.log(\"Error while fetching data of Planets\"),\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2>Planets</h2>\r\n\r\n      {status === \"loading\" ? (\r\n        <Loader />\r\n      ) : status === \"error\" ? (\r\n        <div> Error fetching data</div>\r\n      ) : status === \"success\" ? (\r\n        <div>\r\n          <div className=\"pagination\">\r\n            <button\r\n              className=\"pagination__prev\"\r\n              onClick={() => setPage((old) => Math.min(old - 1, old))}\r\n              disabled={page === 1}\r\n            >\r\n              Previous\r\n            </button>\r\n            <span>{page}</span>\r\n            <button\r\n              className=\"pagination__next\"\r\n              onClick={() => {\r\n                if (!isPreviousData) {\r\n                  setPage((old) => old + 1);\r\n                }\r\n              }}\r\n              disabled={!data.next}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n\r\n          {data.results.map((planet) => (\r\n            <Planet key={planet.name} planet={planet} />\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Planets;\r\n","import React from \"react\";\r\n\r\nconst Person = ({ person }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{person.name}</h3>\r\n      <p>Skin Color - {person.skin_color}</p>\r\n      <p>Birth Year - {person.birth_year}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport Person from \"./Person\";\r\n\r\nimport Loader from \"../Loader\";\r\n\r\n////////////  async function of fetching data of people from api  //////////\r\n\r\nconst fetchPeople = async (page) => {\r\n  const res = await fetch(`https://swapi.dev/api/people/?page=${page}`);\r\n  return res.json();\r\n};\r\n\r\nconst People = () => {\r\n  const [page, setPage] = useState(1);\r\n\r\n  //////////////   useQuery to get data of people asynchronously by providing config (like: staleTime and cacheTime)  ////////////\r\n\r\n  const { data, status, isPreviousData } = useQuery(\r\n    [\"people\", page],\r\n    () => fetchPeople(page),\r\n    { keepPreviousData: true },\r\n    {\r\n      onSuccess: () => console.log(\"People Data feched successfully\"),\r\n      onError: () => console.log(\"Error while fetching data of People\"),\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2>People</h2>\r\n\r\n      {status === \"loading\" ? (\r\n        <Loader />\r\n      ) : status === \"error\" ? (\r\n        <div> Error fetching data</div>\r\n      ) : status === \"success\" ? (\r\n        <div>\r\n          <div className=\"pagination\">\r\n            <button\r\n              className=\"pagination__left\"\r\n              onClick={() => setPage((old) => Math.min(old - 1, old))}\r\n              disabled={page === 1}\r\n            >\r\n              Previous\r\n            </button>\r\n            <span>{page}</span>\r\n            <button\r\n              className=\"pagination__right\"\r\n              onClick={() => {\r\n                if (!isPreviousData) {\r\n                  setPage((old) => old + 1);\r\n                }\r\n              }}\r\n              disabled={!data.next}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n          {data.results.map((person) => (\r\n            <Person key={person.name} person={person} />\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default People;\r\n","import React from \"react\";\r\n\r\nconst Starship = ({ starship }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{starship.name}</h3>\r\n      <p>Manufacturer - {starship.manufacturer}</p>\r\n      <p>Model - {starship.model}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starship;\r\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport Starship from \"./Starship\";\r\n\r\nimport Loader from \"../Loader\";\r\n\r\n////////////  async function of fetching data of starships from api  //////////\r\n\r\nconst fetchStarships = async (page) => {\r\n  const res = await fetch(`https://swapi.dev/api/starships/?page=${page}`);\r\n  return res.json();\r\n};\r\n\r\nconst Starships = () => {\r\n  const [page, setPage] = useState(1);\r\n\r\n  //////////////   useQuery to get data of starships asynchronously by providing config (like: staleTime and cacheTime)  ////////////\r\n\r\n  const { data, status, isPreviousData } = useQuery(\r\n    [\"starships\", page],\r\n    () => fetchStarships(page),\r\n    { keepPreviousData: true },\r\n    {\r\n      onSuccess: () => console.log(\"Starships Data feched successfully\"),\r\n      onError: () => console.log(\"Error while fetching data of Starships\"),\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2>Starships</h2>\r\n\r\n      {status === \"loading\" ? (\r\n        <Loader />\r\n      ) : status === \"error\" ? (\r\n        <div> Error fetching data</div>\r\n      ) : status === \"success\" ? (\r\n        <div>\r\n          <div>\r\n            <div className=\"pagination\">\r\n              <button\r\n                className=\"pagination__left\"\r\n                onClick={() => setPage((old) => Math.min(old - 1, old))}\r\n                disabled={page === 1}\r\n              >\r\n                Previous\r\n              </button>\r\n              <span>{page}</span>\r\n              <button\r\n                className=\"pagination__right\"\r\n                onClick={() => {\r\n                  if (!isPreviousData) {\r\n                    setPage((old) => old + 1);\r\n                  }\r\n                }}\r\n                disabled={!data.next}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n            {data.results.map((starship) => (\r\n              <Starship key={starship.name} starship={starship} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Starships;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Navbar from \"./Navbar\";\r\nimport Films from \"./Films/Films\";\r\nimport Planets from \"./Planets/Planets\";\r\nimport People from \"./People/People\";\r\nimport Starships from \"./Starships/Starships\";\r\n\r\nconst Home = () => {\r\n  const [page, setPage] = useState(\"planets\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <h1>STAR WARS</h1>\r\n        <Navbar setPage={setPage} />\r\n        <div className=\"content\">\r\n          {page === \"planets\" ? (\r\n            <Planets />\r\n          ) : page === \"people\" ? (\r\n            <People />\r\n          ) : page === \"starships\" ? (\r\n            <Starships />\r\n          ) : (\r\n            <Films />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"footer\">Made with ♥ by Shubham Dutta</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\n\r\nimport Home from \"./components/Home\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/styles.css\";\r\n\r\n//@ staleTime: fetching time to keep fetched data fresh\r\n//           - It will refetch to see if there any updated data\r\n//             that will render to the dom and keep it fresh\r\n\r\n//@ cacheTime: this is how long stale queries are cached for\r\n//              before they are disposed of\r\n//          Ex: If we go on to another component and\r\n//              back again it will use cached data and\r\n//              it will really quick to load for cache time\r\n//              (default: 300,000 ms)\r\n\r\nconst queryClient = new QueryClient();\r\n\r\n/////////////////   SET default query options   ////////////////////\r\n\r\nqueryClient.setDefaultOptions({\r\n  queries: {\r\n    // staleTime: 0,\r\n    // cacheTime: 300000,\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Home />\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}